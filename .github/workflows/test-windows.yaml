# modified from https://github.com/simonmichael/hledger/blob/master/.github/workflows/windows.yml

name: CI (Windows)

on:
  push:
    branches: [master, ci-*]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: windows-latest
    steps:

    - name: üì• Checkout repository
      uses: actions/checkout@v4

    # things to be restored:

    - name: üíæ Restore cached stack global package db
      id:   stack-global
      uses: actions/cache/restore@v3
      with:
        path: C:\Users\runneradmin\AppData\Roaming\stack\
        key: ${{ runner.os }}-appdata-roaming-stack-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-appdata-roaming-stack

    - name: üíæ Restore cached stack-installed programs in ~/.local/bin
      id:   stack-programs
      uses: actions/cache/restore@v3
      with:
        path: C:\Users\runneradmin\AppData\Local\Programs\stack\
        # which files signal a change in stack's global db ?
        # **.yaml includes */package.yaml and stack.yaml* (too many), and hopefully no other changing yamls
        key: ${{ runner.os }}-appdata-local-programs-stack-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-appdata-local-programs-stack

    - name: üíæ Restore cached .stack-work
      id:   stack-work
      uses: actions/cache/restore@v3
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-work

    # actions

    - name: ‚è¨ Install stack
      #if: steps.stack-programs-dir.outputs.cache-hit != 'true'
      # this step is needed to get stack.exe into PATH, for now
      run: |
        curl -sL https://get.haskellstack.org/stable/windows-x86_64.zip -o stack.zip
        7z x stack.zip stack.exe
        which stack
        stack --version
        which ./stack
        ./stack --version
      # must avoid GHC versions broken on windows such as 8.8.3 with https://gitlab.haskell.org/ghc/ghc/issues/17926
      # current default stack.yaml uses GHC 8.8.4 which hopefully is ok

    - name: ‚è¨ Install GHC
      # if: steps.stack-programs-dir.outputs.cache-hit != 'true'
      # set PATH=C:\Users\runneradmin\AppData\Local\Programs\stack\local\bin;%PATH%
      run: |
        ./stack --no-terminal setup --install-ghc

    - name: Install the icu library
      run: |
        ./stack exec -- pacman -S --noconfirm mingw-w64-x86_64-icu mingw-w64-x86_64-pkgconf

    - name: üì∏ Build Snapshot
      run: |
        ./stack build --no-terminal --only-snapshot -j1

    - name: üß∞ Build Dependencies
      run: |
        ./stack build --no-terminal --only-dependencies

    - name: üî® Build and run tests
      run: |
        ./stack test

    # things to be cached

    - name: üíæ Cache stack global package db
      if:   always() && steps.stack-global.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ~/.stack
        key: ${{ steps.stack-global.outputs.cache-primary-key }}

    - name: üíæ Cache stack-installed programs in ~/.local/bin
      if:   always() && steps.stack-programs.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ~/.local/bin
        key: ${{ steps.stack-programs.outputs.cache-primary-key }}

    - name: üíæ Cache .stack-work
      if:   always() && steps.stack-work.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: .stack-work
        key: ${{ steps.stack-work.outputs.cache-primary-key }}

    # release (optional)
    # artifacts:

    - name: üì¶ Compress executable and data files
      run: |
        # locate the data-dir
        $snapshot = (stack path --snapshot-install-root)
        $datadir = (ls $snapshot\share *Agda-* -Recurse -Directory).FullName

        # locate the executable
        $local = (stack path --local-install-root)
        $executable = (ls $local\bin *als.exe* -Recurse -File).FullName

        # make a temporary directory for compresssing
        mkdir zip
        cp -r $datadir zip/data
        cp $executable zip/

        # include text-icu DLLs
        $mingw64bin = (stack path --extra-library-dirs).split(", ") -match "\\bin"
        ls $mingw64bin
        cp (ls $mingw64bin *libicudt*) zip/
        cp (ls $mingw64bin *libicuin*) zip/
        cp (ls $mingw64bin *libicuuc*) zip/
        ls zip

        # compress
        cd zip
        Compress-Archive * als-windows.zip
        cd ..
        mv zip/als-windows.zip .

    - name: üö¢ Release Artifacts
      if: startsWith(github.ref, 'refs/tags/') # so that only commits with a git tag would upload artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.ref }} als-windows.zip --clobber
